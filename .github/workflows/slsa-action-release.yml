name: SLSA Compliant GitHub Action Release

# This workflow creates a SLSA-compliant release for GitHub Actions
# It's designed as a reusable workflow that can be called from other workflows
# It enforces releases only through labeled PRs (bump:patch, bump:minor, bump:major)
on:
  workflow_call:
    inputs:
      branch:
        description: 'The working branch'
        required: false
        default: 'main'
        type: string
      rekor-log-public:
        description: 'Allow repository name to be logged in public Rekor transparency log'
        required: false
        type: boolean
        default: true
    secrets:
      github-token:
        description: 'GitHub token with appropriate permissions'
        required: true
    outputs:
      tag_name:
        description: 'The tag name created or used for this release'
        value: ${{ jobs.version.outputs.tag_name }}
      version:
        description: 'The version number without "v" prefix'
        value: ${{ jobs.version.outputs.version }}
      release_url:
        description: 'URL of the created GitHub release'
        value: ${{ jobs.release.outputs.release_url }}

jobs:
  # Version management and tag creation job
  version:
    runs-on: ubuntu-latest
    permissions:
      id-token: write # Enable OIDC
      contents: write # Tag updates
      pull-requests: write # Post comment
    outputs:
      tag_name: ${{ steps.tag.outputs.value }}
      version: ${{ steps.extract-version.outputs.version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ inputs.branch }}

      # Set up signed tag configuration
      - uses: chainguard-dev/actions/setup-gitsign@main
      - run: git config --global tag.gpgSign true

      # Bump version based on PR labels (bump:major,bump:minor,bump:patch)
      - id: bumpr
        uses: haya14busa/action-bumpr@v1.11.3

      # Update corresponding major and minor tags
      - uses: haya14busa/action-update-semver@v1.2.1
        if: "steps.bumpr.outputs.skip != 'true'"
        with:
          tag: ${{ steps.bumpr.outputs.next_version }}

      # Get tag name from bumpr output only
      - id: tag
        run: |
          if [[ "${{ steps.bumpr.outputs.skip }}" == "true" ]]; then
            echo "value=" >> $GITHUB_OUTPUT
            echo "No version bump label found, skipping release."
          else
            TAG="${{ steps.bumpr.outputs.next_version }}"
            echo "value=${TAG}" >> $GITHUB_OUTPUT
            echo "Next version: ${TAG}"
          fi

      # Extract version number without "v" prefix (v1.2.3 â†’ 1.2.3)
      - id: extract-version
        if: "steps.tag.outputs.value != ''"
        run: |
          TAG=${{ steps.tag.outputs.value }}
          VERSION=${TAG#refs/tags/v}
          VERSION=${VERSION#v}
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "Extracted version: ${VERSION}"

  # Prepare information for SLSA provenance
  prepare-info:
    needs: [version]
    if: "needs.version.outputs.tag_name != ''"
    runs-on: ubuntu-latest
    outputs:
      commit_sha: ${{ steps.save-info.outputs.commit_sha }}
      tag_name: ${{ steps.save-info.outputs.tag_name }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ needs.version.outputs.tag_name }}

      # Save commit info for SLSA provenance
      - name: Save commit info
        id: save-info
        run: |
          COMMIT_SHA="${{ github.sha }}"
          TAG="${{ needs.version.outputs.tag_name }}"
          TAG_NAME="${TAG#refs/tags/}"

          echo "commit_sha=$COMMIT_SHA" >> $GITHUB_OUTPUT
          echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
          echo "Using commit: $COMMIT_SHA with tag: $TAG_NAME for provenance"

  # Prepare the base64-subjects for SLSA provenance
  prepare-subjects:
    needs: [version, prepare-info]
    if: "needs.version.outputs.tag_name != ''"
    runs-on: ubuntu-latest
    outputs:
      base64-subjects: ${{ steps.generate-subjects.outputs.base64-subjects }}
    steps:
      - name: Generate subjects
        id: generate-subjects
        run: |
          # Create a subject entry for the Git tag/commit
          TAG_NAME="${{ needs.prepare-info.outputs.tag_name }}"
          COMMIT_SHA="${{ needs.prepare-info.outputs.commit_sha }}"

          # Convert the Git SHA to SHA-256 format (using it as input to sha256sum)
          SHA256=$(echo -n "$COMMIT_SHA" | sha256sum | cut -d' ' -f1)

          # Format as sha256sum output: "<sha256> <name>"
          echo "$SHA256 $TAG_NAME" > subjects.txt

          # Display for debugging
          cat subjects.txt

          # Base64 encode the subjects file
          BASE64_SUBJECTS=$(base64 -w0 subjects.txt)
          echo "base64-subjects=$BASE64_SUBJECTS" >> $GITHUB_OUTPUT

  # Generate SLSA provenance using reusable workflow
  generate-provenance:
    needs: [version, prepare-info, prepare-subjects]
    if: "needs.version.outputs.tag_name != ''"
    permissions:
      id-token: write    # Required for SLSA provenance generation
      contents: write    # Required for attestations
      actions: read      # Required to access workflow information
    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_generic_slsa3.yml@v2.1.0
    with:
      base64-subjects: ${{ needs.prepare-subjects.outputs.base64-subjects }}

  # Create GitHub Release job
  release:
    needs: [version, generate-provenance, prepare-info]
    if: "needs.version.outputs.tag_name != ''"
    runs-on: ubuntu-latest
    permissions:
      contents: write # Required for release creation
    outputs:
      release_url: ${{ steps.create_release.outputs.release_url }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ needs.version.outputs.tag_name }}

      # Create GitHub Release
      - name: Create GitHub Release
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.github-token }}
        run: |
          TAG_NAME="${{ needs.version.outputs.tag_name }}"
          # Remove refs/tags/ prefix if present
          TAG_NAME="${TAG_NAME#refs/tags/}"

          RELEASE_URL=$(gh release create "$TAG_NAME" \
            --title "Release $TAG_NAME" \
            --notes "${{ steps.bumpr.outputs.message }}" \
            --verify-tag)

          echo "release_url=$RELEASE_URL" >> $GITHUB_OUTPUT

          echo "Created release: $RELEASE_URL"
