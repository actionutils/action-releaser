name: Trusted Release Workflow

# This workflow creates a SLSA-compliant release for GitHub repositories
# It's designed as a reusable workflow that can be called from other workflows
# It enforces releases only through labeled PRs (bump:patch, bump:minor, bump:major)
on:
  workflow_call:
    inputs:
      branch:
        description: 'The working branch'
        required: false
        default: ${{ github.event.repository.default_branch }}
        type: string
      rekor-log-public:
        description: 'Allow repository name to be logged in public Rekor transparency log'
        required: false
        type: boolean
        default: true
      draft:
        description: 'Whether to keep the release as a draft'
        required: false
        type: boolean
        default: false
    secrets:
      github-token:
        description: 'GitHub token with appropriate permissions'
        required: true
    outputs:
      tag_name:
        description: 'The tag name created or used for this release'
        value: ${{ jobs.version.outputs.tag_name }}
      version:
        description: 'The version number without "v" prefix'
        value: ${{ jobs.version.outputs.version }}
      release_url:
        description: 'URL of the created GitHub release'
        value: ${{ jobs.release.outputs.release_url }}

jobs:
  # Version management and tag creation job
  version:
    runs-on: ubuntu-latest
    permissions:
      id-token: write # Enable OIDC
      contents: write # Tag updates
      pull-requests: write # Post comment
    outputs:
      tag_name: ${{ steps.tag.outputs.value }}
      version: ${{ steps.extract-version.outputs.version }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.branch }}

      # Set up signed tag configuration
      - uses: chainguard-dev/actions/setup-gitsign@1054a7f14edea88ef30dc2732c0a5e8d05db4ecc
      - run: git config --global tag.gpgSign true

      # Bump version based on PR labels (bump:major,bump:minor,bump:patch)
      - id: bumpr
        uses: haya14busa/action-bumpr@v1.11.4

      # Update corresponding major and minor tags
      - uses: haya14busa/action-update-semver@v1.3.0
        if: steps.bumpr.outputs.skip != 'true'
        with:
          tag: ${{ steps.bumpr.outputs.next_version }}

      # Get tag name from bumpr output only
      - id: tag
        run: |
          if [[ "${{ steps.bumpr.outputs.skip }}" == "true" ]]; then
            echo "value=" >> $GITHUB_OUTPUT
            echo "No version bump label found, skipping release."
          else
            TAG="${{ steps.bumpr.outputs.next_version }}"
            echo "value=${TAG}" >> $GITHUB_OUTPUT
            echo "Next version: ${TAG}"
          fi

      # Extract version number without "v" prefix (v1.2.3 → 1.2.3)
      - id: extract-version
        if: steps.tag.outputs.value != ''
        run: |
          TAG=${{ steps.tag.outputs.value }}
          VERSION=${TAG#refs/tags/v}
          VERSION=${VERSION#v}
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "Extracted version: ${VERSION}"

  # Prepare information for SLSA provenance
  prepare-slsa:
    needs: [version]
    if: needs.version.outputs.tag_name != ''
    runs-on: ubuntu-latest
    permissions:
      id-token: write   # Required for attestation
      contents: read    # Required for attestation
      attestations: write # Required for creating attestations
    outputs:
      commit_sha: ${{ steps.save-info.outputs.commit_sha }}
      tag_name: ${{ steps.save-info.outputs.tag_name }}
      base64-subjects: ${{ steps.generate-subjects.outputs.base64-subjects }}
    steps:
      # Save commit info for SLSA provenance
      - name: Save commit info
        id: save-info
        run: |
          COMMIT_SHA="${{ github.sha }}"
          TAG="${{ needs.version.outputs.tag_name }}"
          TAG_NAME="${TAG#refs/tags/}"

          echo "commit_sha=$COMMIT_SHA" >> $GITHUB_OUTPUT
          echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
          echo "Using commit: $COMMIT_SHA with tag: $TAG_NAME for provenance"

      # Generate release-identity.intoto.jsonl file for SLSA verification
      # Note: We intentionally do not include source code archives (zip/tar.gz) in the SLSA provenance
      # because GitHub does not guarantee their stability over time:
      # - https://docs.github.com/en/repositories/working-with-files/using-files/downloading-source-code-archives#stability-of-source-code-archives
      # - https://github.blog/open-source/git/update-on-the-future-stability-of-source-code-archives-and-hashes/
      # Instead, we include the commit SHA in release-identity.intoto.jsonl and verify that it matches the SHA that the tag points to.
      - name: Generate release identity file
        id: generate-metadata
        run: |
          REPO_NAME="${GITHUB_REPOSITORY#*/}"
          CREATED_AT=$(date +%s)  # Unix timestamp (seconds since epoch)

          # Create release-identity.intoto.jsonl file using in-toto Statement format
          cat > release-identity.intoto.jsonl << EOF
          {
            "_type": "https://in-toto.io/Statement/v0.1",
            "predicateType": "https://github.com/actionutils/trusted-tag-releaser/tree/main/in-toto/release-identity/v1",
            "subject": [
              {
                "name": "$REPO_NAME",
                "digest": {
                  "git": "${{ github.sha }}"
                }
              }
            ],
            "predicate": {
              "version": "${{ needs.version.outputs.tag_name }}",
              "created_at": $CREATED_AT,
              "git": {
                "tag": "${{ needs.version.outputs.tag_name }}",
                "repository": "https://github.com/$GITHUB_REPOSITORY"
              }
            }
          }
          EOF

          echo "Generated release-identity.intoto.jsonl"

      # Generate base64-subjects directly
      - name: Generate subjects
        id: generate-subjects
        run: |
          # sha256sum generates output in format "<hash> <filename>" which is exactly what we need
          # base64 -w0 encodes to base64 and outputs on a single line
          echo "base64-subjects=$(sha256sum release-identity.intoto.jsonl | base64 -w0)" >> $GITHUB_OUTPUT


      # Upload release-identity.intoto.jsonl as an artifact to share between jobs
      - name: Upload release identity artifact
        id: upload-identity
        uses: actions/upload-artifact@v4
        with:
          name: release-identity-intoto
          path: release-identity.intoto.jsonl
          retention-days: 1

      - uses: actions/attest-build-provenance@v2
        with:
          subject-path: release-identity.intoto.jsonl

  # Generate SLSA provenance using reusable workflow
  generate-provenance:
    needs: [version, prepare-slsa]
    if: needs.version.outputs.tag_name != ''
    permissions:
      id-token: write    # Required for SLSA provenance generation
      contents: write    # Required for attestations
      actions: read      # Required to access workflow information
    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_generic_slsa3.yml@v2.1.0
    with:
      base64-subjects: ${{ needs.prepare-slsa.outputs.base64-subjects }}
      upload-assets: true
      upload-tag-name: ${{ needs.version.outputs.tag_name }}
      draft-release: true
      provenance-name: provenance.intoto.jsonl

  # Create GitHub Release job
  release:
    needs: [version, generate-provenance, prepare-slsa]
    if: needs.version.outputs.tag_name != ''
    runs-on: ubuntu-latest
    permissions:
      contents: write # Required for release creation
    outputs:
      release_url: ${{ steps.create_release.outputs.release_url }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ needs.version.outputs.tag_name }}

      # Download the artifacts from previous jobs

      - name: Download release-identity.intoto.jsonl
        uses: actions/download-artifact@v4
        with:
          name: release-identity-intoto

      # Update existing draft release
      - name: Update GitHub Release
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.github-token }}
        run: |
          TAG_NAME="${{ needs.prepare-slsa.outputs.tag_name }}"

          # Upload artifacts to the release
          gh release upload "$TAG_NAME" release-identity.intoto.jsonl --clobber

          # Update the existing draft release
          RELEASE_URL=$(gh release edit "$TAG_NAME" \
            --title "Release $TAG_NAME" \
            --notes "$(gh release view "$TAG_NAME" --json body -q .body || echo "")" \
            --draft=${{ inputs.draft }})

          echo "release_url=$RELEASE_URL" >> $GITHUB_OUTPUT
          echo "Release URL: $RELEASE_URL"

  # Verify the release using SLSA verifier and gh attestation verify
  verify-release:
    needs: [release, prepare-slsa]
    if: needs.version.outputs.tag_name != ''
    runs-on: ubuntu-latest
    permissions:
      contents: read # Required to read release artifacts
    steps:
      - name: Install SLSA verifier
        uses: slsa-framework/slsa-verifier/actions/installer@v2.7.0

      - name: Create temporary directory
        id: tempdir
        run: |
          # Create temporary directory
          TEMP_DIR=$(mktemp -d)
          echo "dir=$TEMP_DIR" >> $GITHUB_OUTPUT
          echo "Created temporary directory: $TEMP_DIR"

      - name: Download files for verification
        env:
          GITHUB_TOKEN: ${{ secrets.github-token }}
        run: |
          TAG_NAME="${{ needs.prepare-slsa.outputs.tag_name }}"
          TEMP_DIR="${{ steps.tempdir.outputs.dir }}"

          # Download the specific attestation file and release-identity.intoto.jsonl
          gh release download "$TAG_NAME" --repo "$GITHUB_REPOSITORY" --pattern "provenance.intoto.jsonl" --dir "$TEMP_DIR"
          gh release download "$TAG_NAME" --repo "$GITHUB_REPOSITORY" --pattern "release-identity.intoto.jsonl" --dir "$TEMP_DIR"

          echo "Downloaded files to: $TEMP_DIR"
          ls -la "$TEMP_DIR"

      # Verify provenance and commit SHA
      # Since we don't include source code archives in the SLSA provenance due to their instability,
      # we instead verify that the commit SHA in release-identity.intoto.jsonl matches the SHA that the tag points to.
      # This provides a more reliable verification mechanism that isn't affected by GitHub's archive generation process.
      - name: Verify SLSA provenance and commit SHA
        env:
          GITHUB_TOKEN: ${{ secrets.github-token }}
        run: |
          TAG_NAME="${{ needs.prepare-slsa.outputs.tag_name }}"
          REPO_NAME="${GITHUB_REPOSITORY}"
          TEMP_DIR="${{ steps.tempdir.outputs.dir }}"

          # Use the specific attestation file and identity file
          ATTESTATION_FILE="$TEMP_DIR/provenance.intoto.jsonl"
          IDENTITY_FILE="$TEMP_DIR/release-identity.intoto.jsonl"

          if [ -z "$ATTESTATION_FILE" ]; then
            echo "Error: No attestation file found"
            exit 1
          fi

          if [ -z "$IDENTITY_FILE" ]; then
            echo "Error: No release-identity.intoto.jsonl file found"
            exit 1
          fi

          echo "Verifying provenance for $ATTESTATION_FILE with identity file"

          # Verify the provenance
          slsa-verifier verify-artifact \
            --provenance-path "$ATTESTATION_FILE" \
            --source-uri "github.com/$REPO_NAME" \
            --source-branch "${{ inputs.branch }}" \
            "$IDENTITY_FILE"

          echo "✅ Provenance verification successful!"

          # Verify that the commit SHA in release-identity.intoto.jsonl matches the SHA that the tag points to
          echo "Verifying commit SHA in release-identity.intoto.jsonl..."

          # Get the commit SHA from release-identity.intoto.jsonl
          IDENTITY_COMMIT_SHA=$(jq -r '.subject[0].digest.git' "$IDENTITY_FILE")

          # Get the commit SHA that the tag points to using GitHub API
          # First, get the tag SHA
          TAG_SHA=$(gh api repos/$REPO_NAME/git/refs/tags/$TAG_NAME --jq '.object.sha')
          echo "Tag SHA: $TAG_SHA"

          # Then, get the commit SHA that the tag points to
          TAG_COMMIT_SHA=$(gh api repos/$REPO_NAME/git/tags/$TAG_SHA --jq '.object.sha')

          echo "Commit SHA in release-identity.intoto.jsonl: $IDENTITY_COMMIT_SHA"
          echo "Commit SHA that tag $TAG_NAME points to: $TAG_COMMIT_SHA"

          # Verify that the commit SHAs match
          if [ "$IDENTITY_COMMIT_SHA" != "$TAG_COMMIT_SHA" ]; then
            echo "❌ Commit SHA verification failed! The commit SHA in release-identity.intoto.jsonl does not match the SHA that the tag points to."
            exit 1
          fi

          echo "✅ Commit SHA verification successful!"

      - name: Print provenance
        run: |
          TEMP_DIR="${{ steps.tempdir.outputs.dir }}"
          ATTESTATION_FILE="$TEMP_DIR/provenance.intoto.jsonl"
          IDENTITY_FILE="$TEMP_DIR/release-identity.intoto.jsonl"
          REPO_NAME="${GITHUB_REPOSITORY}"

          echo "Printing provenance information:"
          slsa-verifier verify-artifact \
            --provenance-path "$ATTESTATION_FILE" \
            --source-uri "github.com/$REPO_NAME" \
            --source-branch "${{ inputs.branch }}" \
            --print-provenance \
            "$IDENTITY_FILE" 2>/dev/null | jq .

      - name: Verify build provenance attestation
        env:
          GITHUB_TOKEN: ${{ secrets.github-token }}
          GH_FORCE_TTY: 1
        run: |
          TEMP_DIR="${{ steps.tempdir.outputs.dir }}"
          IDENTITY_FILE="$TEMP_DIR/release-identity.intoto.jsonl"
          echo "Verifying build provenance attestation for release-identity.intoto.jsonl"

          gh attestation verify "$IDENTITY_FILE" --repo $GITHUB_REPOSITORY --signer-repo=actionutils/trusted-tag-releaser

          echo "✅ Build provenance attestation verification successful!"

      - name: Cleanup
        if: always()
        run: |
          # Clean up temporary directory
          TEMP_DIR="${{ steps.tempdir.outputs.dir }}"
          if [ -d "$TEMP_DIR" ]; then
            rm -rf "$TEMP_DIR"
            echo "Temporary directory cleaned up: $TEMP_DIR"
          fi
