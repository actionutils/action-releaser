name: Test Attestation Verify

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  test-attestation:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup GitHub CLI
        run: |
          # GitHub CLI is pre-installed on the latest Ubuntu runners,
          # but check the version just to be sure
          gh --version

      - name: Get latest release
        id: latest-release
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          # Get the latest release tag
          LATEST_RELEASE=$(gh release list --repo $GITHUB_REPOSITORY --limit 1 --json tagName,name -q '.[0]')
          if [ -z "$LATEST_RELEASE" ]; then
            echo "Error: No releases found in the repository"
            exit 1
          fi
          
          # Extract tag name using jq
          LATEST_TAG=$(echo $LATEST_RELEASE | jq -r '.tagName')
          echo "Latest release tag: $LATEST_TAG"
          echo "tag=$LATEST_TAG" >> $GITHUB_OUTPUT
          
          # Also print release name for debugging
          RELEASE_NAME=$(echo $LATEST_RELEASE | jq -r '.name')
          echo "Release name: $RELEASE_NAME"

      - name: Create temporary directory
        id: tempdir
        run: |
          # Create a temporary directory
          TEMP_DIR=$(mktemp -d)
          echo "dir=$TEMP_DIR" >> $GITHUB_OUTPUT
          echo "Created temporary directory: $TEMP_DIR"

      - name: Download attestation files
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          TAG="${{ steps.latest-release.outputs.tag }}"
          TEMP_DIR="${{ steps.tempdir.outputs.dir }}"
          
          if [ -z "$TAG" ]; then
            echo "Error: No tag name available"
            exit 1
          fi
          
          echo "Downloading files from release: $TAG"
          
          # List available assets for debugging
          echo "Available release assets:"
          gh release view "$TAG" --repo "$GITHUB_REPOSITORY" --json assets -q '.assets[].name'
          
          # Download action-identity.json and related attestation files
          gh release download "$TAG" --repo "$GITHUB_REPOSITORY" --pattern "action-identity.json" --dir "$TEMP_DIR" || {
            echo "Warning: Failed to download action-identity.json, checking for alternative locations"
            # Try to find in subdirectories if direct download fails
            gh release download "$TAG" --repo "$GITHUB_REPOSITORY" --pattern "*/action-identity.json" --dir "$TEMP_DIR" || true
          }
          
          gh release download "$TAG" --repo "$GITHUB_REPOSITORY" --pattern "*.intoto.jsonl" --dir "$TEMP_DIR" || {
            echo "Warning: Failed to download attestation files, checking for alternative locations"
            # Try to find in subdirectories if direct download fails
            gh release download "$TAG" --repo "$GITHUB_REPOSITORY" --pattern "*/*.intoto.jsonl" --dir "$TEMP_DIR" || true
          }
          
          echo "Downloaded files:"
          ls -la "$TEMP_DIR"
          
          # Check if we have the necessary files
          if [ ! -f "$TEMP_DIR/action-identity.json" ] && [ ! -f "$TEMP_DIR"/*"/action-identity.json" ]; then
            echo "Error: Could not find action-identity.json in downloaded files"
            exit 1
          fi
          
          # Find the actual path to action-identity.json
          IDENTITY_FILE=$(find "$TEMP_DIR" -name "action-identity.json" | head -n 1)
          echo "Found identity file at: $IDENTITY_FILE"
          
          # Copy to the expected location if it's in a subdirectory
          if [ "$IDENTITY_FILE" != "$TEMP_DIR/action-identity.json" ]; then
            cp "$IDENTITY_FILE" "$TEMP_DIR/action-identity.json"
            echo "Copied identity file to: $TEMP_DIR/action-identity.json"
          fi
          
          # Find attestation file
          ATTESTATION_FILE=$(find "$TEMP_DIR" -name "*.intoto.jsonl" | head -n 1)
          if [ -n "$ATTESTATION_FILE" ]; then
            echo "Found attestation file at: $ATTESTATION_FILE"
            # Copy to the expected location if needed
            if [ "$ATTESTATION_FILE" != "$TEMP_DIR/action-identity.json.intoto.jsonl" ]; then
              cp "$ATTESTATION_FILE" "$TEMP_DIR/action-identity.json.intoto.jsonl"
              echo "Copied attestation file to: $TEMP_DIR/action-identity.json.intoto.jsonl"
            fi
          else
            echo "Warning: No attestation file found"
          fi

      - name: Verify attestation (standard output)
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          TEMP_DIR="${{ steps.tempdir.outputs.dir }}"
          IDENTITY_FILE="$TEMP_DIR/action-identity.json"
          
          echo "=== Standard verification ==="
          echo "Verifying build provenance attestation for action-identity.json"
          gh attestation verify "$IDENTITY_FILE" --repo $GITHUB_REPOSITORY
          echo "Standard verification exit code: $?"

      - name: Verify attestation (with output redirection)
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          TEMP_DIR="${{ steps.tempdir.outputs.dir }}"
          IDENTITY_FILE="$TEMP_DIR/action-identity.json"
          
          echo "=== Verification with output redirection ==="
          gh attestation verify "$IDENTITY_FILE" --repo $GITHUB_REPOSITORY > verify_output.txt 2>&1
          VERIFY_EXIT_CODE=$?
          
          echo "Verification output:"
          cat verify_output.txt
          echo "Verification with redirection exit code: $VERIFY_EXIT_CODE"

      - name: Verify attestation (with verbose flag if available)
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          TEMP_DIR="${{ steps.tempdir.outputs.dir }}"
          IDENTITY_FILE="$TEMP_DIR/action-identity.json"
          
          echo "=== Verification with verbose flag ==="
          # Check if --verbose flag is available
          if gh attestation verify --help | grep -q -- "--verbose"; then
            gh attestation verify "$IDENTITY_FILE" --repo $GITHUB_REPOSITORY --verbose
          else
            echo "Verbose flag not available, using standard command"
            GITHUB_STEP_SUMMARY="Verbose flag not available for gh attestation verify"
            gh attestation verify "$IDENTITY_FILE" --repo $GITHUB_REPOSITORY
          fi
          echo "Verification with verbose flag exit code: $?"

      - name: Verify attestation (with debug environment variable)
        env:
          GH_TOKEN: ${{ github.token }}
          GH_DEBUG: 1
        run: |
          TEMP_DIR="${{ steps.tempdir.outputs.dir }}"
          IDENTITY_FILE="$TEMP_DIR/action-identity.json"
          
          echo "=== Verification with debug environment variable ==="
          # Set GH_DEBUG to enable detailed output
          gh attestation verify "$IDENTITY_FILE" --repo $GITHUB_REPOSITORY
          echo "Verification with debug env exit code: $?"
      
      - name: Verify attestation (intentionally failing)
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          TEMP_DIR="${{ steps.tempdir.outputs.dir }}"
          IDENTITY_FILE="$TEMP_DIR/action-identity.json"
          
          echo "=== Intentionally failing verification ==="
          echo "Using wrong repository to force failure and see error output"
          
          # Use a different repository to force verification failure
          gh attestation verify "$IDENTITY_FILE" --repo "github/docs" || {
            echo "Expected failure occurred with exit code: $?"
          }
          
          # Try with stderr redirection to see if errors are shown
          echo "=== Failing verification with stderr capture ==="
          gh attestation verify "$IDENTITY_FILE" --repo "github/docs" 2>&1 || {
            echo "Expected failure occurred with exit code: $?"
          }

      - name: Cleanup
        if: always()
        run: |
          TEMP_DIR="${{ steps.tempdir.outputs.dir }}"
          if [ -d "$TEMP_DIR" ]; then
            rm -rf "$TEMP_DIR"
            echo "Temporary directory cleaned up: $TEMP_DIR"
          fi
          if [ -f "verify_output.txt" ]; then
            rm verify_output.txt
            echo "Output file cleaned up"
          fi